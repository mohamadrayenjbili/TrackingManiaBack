// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrackMania.Data;

#nullable disable

namespace TrackMania.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922115914_MakeDepartementIdNullable")]
    partial class MakeDepartementIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EquipeIngenieur", b =>
                {
                    b.Property<int>("EquipesId")
                        .HasColumnType("integer");

                    b.Property<int>("IngenieursId")
                        .HasColumnType("integer");

                    b.HasKey("EquipesId", "IngenieursId");

                    b.HasIndex("IngenieursId");

                    b.ToTable("EquipeIngenieur");
                });

            modelBuilder.Entity("TrackMania.Models.Departement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departements");
                });

            modelBuilder.Entity("TrackMania.Models.Equipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartementId")
                        .HasColumnType("integer");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Objectif")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("DepartementId");

                    b.ToTable("Equipes");
                });

            modelBuilder.Entity("TrackMania.Models.Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEmission")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IngenieurId")
                        .HasColumnType("integer");

                    b.Property<double>("Montant")
                        .HasColumnType("double precision");

                    b.Property<int>("SocieteId")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IngenieurId");

                    b.HasIndex("SocieteId");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("TrackMania.Models.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("HeuresNonPayees")
                        .HasColumnType("double precision");

                    b.Property<double>("HeuresPayees")
                        .HasColumnType("double precision");

                    b.Property<double>("HeuresTravaillees")
                        .HasColumnType("double precision");

                    b.Property<int>("IngenieurId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SocieteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("IngenieurId");

                    b.HasIndex("SocieteId");

                    b.ToTable("Interventions");
                });

            modelBuilder.Entity("TrackMania.Models.KPI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateMesure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Valeur")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("KPIs");
                });

            modelBuilder.Entity("TrackMania.Models.Societe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Localisation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Secteur")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Societes");
                });

            modelBuilder.Entity("TrackMania.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TrackMania.Models.Ingenieur", b =>
                {
                    b.HasBaseType("TrackMania.Models.User");

                    b.Property<int>("DepartementId")
                        .HasColumnType("integer");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("DepartementId");

                    b.HasDiscriminator().HasValue("Ingenieur");
                });

            modelBuilder.Entity("TrackMania.Models.Admin", b =>
                {
                    b.HasBaseType("TrackMania.Models.Ingenieur");

                    b.Property<int?>("DepartementId1")
                        .HasColumnType("integer");

                    b.HasIndex("DepartementId1");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("EquipeIngenieur", b =>
                {
                    b.HasOne("TrackMania.Models.Equipe", null)
                        .WithMany()
                        .HasForeignKey("EquipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackMania.Models.Ingenieur", null)
                        .WithMany()
                        .HasForeignKey("IngenieursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackMania.Models.Equipe", b =>
                {
                    b.HasOne("TrackMania.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrackMania.Models.Departement", "Departement")
                        .WithMany("Equipes")
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Departement");
                });

            modelBuilder.Entity("TrackMania.Models.Facture", b =>
                {
                    b.HasOne("TrackMania.Models.Ingenieur", "Ingenieur")
                        .WithMany()
                        .HasForeignKey("IngenieurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrackMania.Models.Societe", "Societe")
                        .WithMany("Factures")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingenieur");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("TrackMania.Models.Intervention", b =>
                {
                    b.HasOne("TrackMania.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TrackMania.Models.Ingenieur", "Ingenieur")
                        .WithMany("Interventions")
                        .HasForeignKey("IngenieurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrackMania.Models.Societe", "Societe")
                        .WithMany("Interventions")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Ingenieur");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("TrackMania.Models.KPI", b =>
                {
                    b.HasOne("TrackMania.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("TrackMania.Models.Ingenieur", b =>
                {
                    b.HasOne("TrackMania.Models.Departement", "Departement")
                        .WithMany("Ingenieurs")
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departement");
                });

            modelBuilder.Entity("TrackMania.Models.Admin", b =>
                {
                    b.HasOne("TrackMania.Models.Departement", null)
                        .WithMany("SupervisedAdmins")
                        .HasForeignKey("DepartementId1");
                });

            modelBuilder.Entity("TrackMania.Models.Departement", b =>
                {
                    b.Navigation("Equipes");

                    b.Navigation("Ingenieurs");

                    b.Navigation("SupervisedAdmins");
                });

            modelBuilder.Entity("TrackMania.Models.Societe", b =>
                {
                    b.Navigation("Factures");

                    b.Navigation("Interventions");
                });

            modelBuilder.Entity("TrackMania.Models.Ingenieur", b =>
                {
                    b.Navigation("Interventions");
                });
#pragma warning restore 612, 618
        }
    }
}
